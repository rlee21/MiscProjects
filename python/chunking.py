import multiprocessing
import os
import time

data = [
     {'LastName': 'Maizner',
      'Practice_Area_1__c': 'Employment & Labor',
      'Practice_Area_2__c': 'Entertainment',
      'Practice_Area_3__c': None,
      'Practice_Area_4__c': None,
      'Practice_Area_5__c': None,
      'Professional_ID__c': '1000051'},
     {'LastName': 'Tran',
      'Practice_Area_1__c': 'Guardianship',
      'Practice_Area_2__c': 'Adoption',
      'Practice_Area_3__c': 'Family',
      'Practice_Area_4__c': 'Education',
      'Practice_Area_5__c': 'Juvenile',
      'Professional_ID__c': '100011'},
     {'LastName': 'Cruz',
      'Practice_Area_1__c': 'Employment & Labor',
      'Practice_Area_2__c': 'Education',
      'Practice_Area_3__c': 'State, Local And Municipal Law',
      'Practice_Area_4__c': 'Public Finance & Tax Exempt Finance',
      'Practice_Area_5__c': None,
      'Professional_ID__c': '100012'},
     {'LastName': 'Tran',
      'Practice_Area_1__c': 'Construction & Development',
      'Practice_Area_2__c': 'Business',
      'Practice_Area_3__c': 'Insurance',
      'Practice_Area_4__c': 'Personal Injury',
      'Practice_Area_5__c': 'Real Estate',
      'Professional_ID__c': '100013'},
     {'LastName': 'Bottar',
      'Practice_Area_1__c': 'Medical Malpractice',
      'Practice_Area_2__c': 'Birth Injury',
      'Practice_Area_3__c': 'Personal Injury',
      'Practice_Area_4__c': 'Wrongful Death',
      'Practice_Area_5__c': 'Defective and Dangerous Products',
      'Professional_ID__c': '1000173'},
     {'LastName': 'Cravey',
      'Practice_Area_1__c': 'Wills & Living Wills',
      'Practice_Area_2__c': 'Probate',
      'Practice_Area_3__c': 'Real Estate',
      'Practice_Area_4__c': 'Estate Planning',
      'Practice_Area_5__c': None,
      'Professional_ID__c': '100023'},
     {'LastName': 'Yunger',
      'Practice_Area_1__c': 'Financial Markets and Services',
      'Practice_Area_2__c': 'Mergers & Acquisitions',
      'Practice_Area_3__c': None,
      'Practice_Area_4__c': None,
      'Practice_Area_5__c': None,
      'Professional_ID__c': '1000243'},
     {'LastName': 'Soltani',
      'Practice_Area_1__c': 'Banking',
      'Practice_Area_2__c': 'Construction & Development',
      'Practice_Area_3__c': 'Land Use & Zoning',
      'Practice_Area_4__c': 'Business',
      'Practice_Area_5__c': 'Real Estate',
      'Professional_ID__c': '1000255'},
     {'LastName': 'Cox',
      'Practice_Area_1__c': 'Real Estate',
      'Practice_Area_2__c': 'Business',
      'Practice_Area_3__c': 'Debt Collection',
      'Practice_Area_4__c': 'Probate',
      'Practice_Area_5__c': None,
      'Professional_ID__c': '100027'},
     {'LastName': 'Clough',
      'Practice_Area_1__c': 'Probate',
      'Practice_Area_2__c': 'Trusts',
      'Practice_Area_3__c': 'Estate Planning',
      'Practice_Area_4__c': 'Business',
      'Practice_Area_5__c': None,
      'Professional_ID__c': '1000279'},
     {'LastName': 'Haroutunian',
      'Practice_Area_1__c': 'Tax',
      'Practice_Area_2__c': 'Corporate & Incorporation',
      'Practice_Area_3__c': 'Commercial',
      'Practice_Area_4__c': None,
      'Practice_Area_5__c': None,
      'Professional_ID__c': '1000291'},
     {'LastName': 'Conners',
      'Practice_Area_1__c': 'Litigation',
      'Practice_Area_2__c': 'White Collar Crime',
      'Practice_Area_3__c': 'Appeals',
      'Practice_Area_4__c': 'Intellectual Property',
      'Practice_Area_5__c': 'Class Action',
      'Professional_ID__c': '1000301'},
     {'LastName': 'Schanker',
      'Practice_Area_1__c': 'Estate Planning',
      'Practice_Area_2__c': 'Business',
      'Practice_Area_3__c': 'Elder Law',
      'Practice_Area_4__c': 'Administrative Law',
      'Practice_Area_5__c': None,
      'Professional_ID__c': '1000320'},
     {'LastName': 'Cowan',
      'Practice_Area_1__c': 'Criminal Defense',
      'Practice_Area_2__c': 'Family',
      'Practice_Area_3__c': None,
      'Practice_Area_4__c': None,
      'Practice_Area_5__c': None,
      'Professional_ID__c': '100033'},
     {'LastName': 'Allen',
      'Practice_Area_1__c': 'Family',
      'Practice_Area_2__c': 'Tax',
      'Practice_Area_3__c': 'Estate Planning',
      'Practice_Area_4__c': 'Military Law',
      'Practice_Area_5__c': None,
      'Professional_ID__c': '1000417'},
     {'LastName': 'Schwartz',
      'Practice_Area_1__c': 'Government Contracts',
      'Practice_Area_2__c': 'State, Local And Municipal Law',
      'Practice_Area_3__c': 'Administrative Law',
      'Practice_Area_4__c': None,
      'Practice_Area_5__c': None,
      'Professional_ID__c': '1000450'},
     {'LastName': 'Moylan',
      'Practice_Area_1__c': 'Intellectual Property',
      'Practice_Area_2__c': 'Business',
      'Practice_Area_3__c': 'Patent Application',
      'Practice_Area_4__c': 'Bankruptcy & Debt',
      'Practice_Area_5__c': 'Trademark Application',
      'Professional_ID__c': '1000487'},
     {'LastName': 'Orndoff',
      'Practice_Area_1__c': 'Medical Malpractice',
      'Practice_Area_2__c': 'Commercial',
      'Practice_Area_3__c': 'Landlord & Tenant',
      'Practice_Area_4__c': 'Personal Injury',
      'Practice_Area_5__c': None,
      'Professional_ID__c': '1000538'},
     {'LastName': 'Schramm',
      'Practice_Area_1__c': 'Construction & Development',
      'Practice_Area_2__c': 'Litigation',
      'Practice_Area_3__c': None,
      'Practice_Area_4__c': None,
      'Practice_Area_5__c': None,
      'Professional_ID__c': '1000540'},
     {'LastName': 'Coomer',
      'Practice_Area_1__c': 'Securities Offerings',
      'Practice_Area_2__c': 'Health Care',
      'Practice_Area_3__c': 'Health Care',
      'Practice_Area_4__c': 'Business',
      'Practice_Area_5__c': 'Personal Injury',
      'Professional_ID__c': '100055'}
]


def transform(data):
    print('Process {} working on record {}'.format(os.getpid(), data['Professional_ID__c']))
    time.sleep(2)
    # result = tuple((data['Professional_ID__c'], data['Practice_Area_1__c'])
    result = (data['Professional_ID__c'], data['Practice_Area_1__c'])
    print('Process {} done processing record {}'.format(os.getpid(), data['Professional_ID__c']))
    return result


start = time.time()

pool = multiprocessing.Pool(processes=5)
result = pool.map(transform, data)

end = time.time()

print('\nTime to complete: {} \n'.format(end - start))
print(result)
